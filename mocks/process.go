// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	process "github.com/go-nacelle/process"
	"sync"
)

// MockProcess is a mock implementation of the Process interface (from the
// package github.com/go-nacelle/process) used for unit testing.
type MockProcess struct {
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *ProcessInitFunc
	// StartFunc is an instance of a mock function object controlling the
	// behavior of the method Start.
	StartFunc *ProcessStartFunc
	// StopFunc is an instance of a mock function object controlling the
	// behavior of the method Stop.
	StopFunc *ProcessStopFunc
}

// NewMockProcess creates a new mock of the Process interface. All methods
// return zero values for all results, unless overwritten.
func NewMockProcess() *MockProcess {
	return &MockProcess{
		InitFunc: &ProcessInitFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		StartFunc: &ProcessStartFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		StopFunc: &ProcessStopFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
	}
}

// NewMockProcessFrom creates a new mock of the MockProcess interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockProcessFrom(i process.Process) *MockProcess {
	return &MockProcess{
		InitFunc: &ProcessInitFunc{
			defaultHook: i.Init,
		},
		StartFunc: &ProcessStartFunc{
			defaultHook: i.Start,
		},
		StopFunc: &ProcessStopFunc{
			defaultHook: i.Stop,
		},
	}
}

// ProcessInitFunc describes the behavior when the Init method of the parent
// MockProcess instance is invoked.
type ProcessInitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ProcessInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockProcess) Init(v0 context.Context) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(ProcessInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockProcess instance is invoked and the hook queue is empty.
func (f *ProcessInitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockProcess instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ProcessInitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ProcessInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ProcessInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ProcessInitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ProcessInitFunc) appendCall(r0 ProcessInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ProcessInitFuncCall objects describing the
// invocations of this function.
func (f *ProcessInitFunc) History() []ProcessInitFuncCall {
	f.mutex.Lock()
	history := make([]ProcessInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ProcessInitFuncCall is an object that describes an invocation of method
// Init on an instance of MockProcess.
type ProcessInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ProcessInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ProcessInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ProcessStartFunc describes the behavior when the Start method of the
// parent MockProcess instance is invoked.
type ProcessStartFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ProcessStartFuncCall
	mutex       sync.Mutex
}

// Start delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockProcess) Start(v0 context.Context) error {
	r0 := m.StartFunc.nextHook()(v0)
	m.StartFunc.appendCall(ProcessStartFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Start method of the
// parent MockProcess instance is invoked and the hook queue is empty.
func (f *ProcessStartFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Start method of the parent MockProcess instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ProcessStartFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ProcessStartFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ProcessStartFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ProcessStartFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ProcessStartFunc) appendCall(r0 ProcessStartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ProcessStartFuncCall objects describing the
// invocations of this function.
func (f *ProcessStartFunc) History() []ProcessStartFuncCall {
	f.mutex.Lock()
	history := make([]ProcessStartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ProcessStartFuncCall is an object that describes an invocation of method
// Start on an instance of MockProcess.
type ProcessStartFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ProcessStartFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ProcessStartFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ProcessStopFunc describes the behavior when the Stop method of the parent
// MockProcess instance is invoked.
type ProcessStopFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ProcessStopFuncCall
	mutex       sync.Mutex
}

// Stop delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockProcess) Stop(v0 context.Context) error {
	r0 := m.StopFunc.nextHook()(v0)
	m.StopFunc.appendCall(ProcessStopFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Stop method of the
// parent MockProcess instance is invoked and the hook queue is empty.
func (f *ProcessStopFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stop method of the parent MockProcess instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ProcessStopFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ProcessStopFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ProcessStopFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ProcessStopFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ProcessStopFunc) appendCall(r0 ProcessStopFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ProcessStopFuncCall objects describing the
// invocations of this function.
func (f *ProcessStopFunc) History() []ProcessStopFuncCall {
	f.mutex.Lock()
	history := make([]ProcessStopFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ProcessStopFuncCall is an object that describes an invocation of method
// Stop on an instance of MockProcess.
type ProcessStopFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ProcessStopFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ProcessStopFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
