// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	config "github.com/go-nacelle/config"
	process "github.com/go-nacelle/process"
	"sync"
)

// MockInitializer is a mock implementation of the Initializer interface
// (from the package github.com/go-nacelle/process) used for unit testing.
type MockInitializer struct {
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *InitializerInitFunc
}

// NewMockInitializer creates a new mock of the Initializer interface. All
// methods return zero values for all results, unless overwritten.
func NewMockInitializer() *MockInitializer {
	return &MockInitializer{
		InitFunc: &InitializerInitFunc{
			defaultHook: func(context.Context, config.Config) error {
				return nil
			},
		},
	}
}

// NewMockInitializerFrom creates a new mock of the MockInitializer
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockInitializerFrom(i process.Initializer) *MockInitializer {
	return &MockInitializer{
		InitFunc: &InitializerInitFunc{
			defaultHook: i.Init,
		},
	}
}

// InitializerInitFunc describes the behavior when the Init method of the
// parent MockInitializer instance is invoked.
type InitializerInitFunc struct {
	defaultHook func(context.Context, config.Config) error
	hooks       []func(context.Context, config.Config) error
	history     []InitializerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInitializer) Init(v0 context.Context, v1 config.Config) error {
	r0 := m.InitFunc.nextHook()(v0, v1)
	m.InitFunc.appendCall(InitializerInitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockInitializer instance is invoked and the hook queue is empty.
func (f *InitializerInitFunc) SetDefaultHook(hook func(context.Context, config.Config) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockInitializer instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InitializerInitFunc) PushHook(hook func(context.Context, config.Config) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *InitializerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, config.Config) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *InitializerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, config.Config) error {
		return r0
	})
}

func (f *InitializerInitFunc) nextHook() func(context.Context, config.Config) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InitializerInitFunc) appendCall(r0 InitializerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InitializerInitFuncCall objects describing
// the invocations of this function.
func (f *InitializerInitFunc) History() []InitializerInitFuncCall {
	f.mutex.Lock()
	history := make([]InitializerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InitializerInitFuncCall is an object that describes an invocation of
// method Init on an instance of MockInitializer.
type InitializerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 config.Config
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InitializerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InitializerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
